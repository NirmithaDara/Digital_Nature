package com.cognizant.springlearn;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.ImportResource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import org.springframework.web.bind.annotation.*;
import org.springframework.stereotype.Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;

@SpringBootApplication
@ImportResource("classpath:department.xml") // Load Spring XML
public class SpringLearnApplication {

    public static void main(String[] args) {
        SpringApplication.run(SpringLearnApplication.class, args);
    }

    // Bean for DepartmentDao loaded from XML
    @Bean
    public DepartmentDao departmentDao() {
        ApplicationContext context = new ClassPathXmlApplicationContext("department.xml");
        return context.getBean("departmentDao", DepartmentDao.class);
    }
}


@RestController
@RequestMapping("/departments")
class DepartmentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DepartmentController.class);

    private final DepartmentService departmentService;

    public DepartmentController(DepartmentService departmentService) {
        this.departmentService = departmentService;
    }

    @GetMapping
    public List<Department> getAllDepartments() {
        LOGGER.info("DepartmentController: getAllDepartments() called");
        return departmentService.getAllDepartments();
    }
}



@Service
class DepartmentService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DepartmentService.class);

    private final DepartmentDao departmentDao;

    public DepartmentService(DepartmentDao departmentDao) {
        this.departmentDao = departmentDao;
    }

    public List<Department> getAllDepartments() {
        LOGGER.info("DepartmentService: getAllDepartments() called");
        return departmentDao.getAllDepartments();
    }
}



class DepartmentDao {

    private static List<Department> DEPARTMENT_LIST;

    public DepartmentDao(List<Department> departmentList) {
        DEPARTMENT_LIST = departmentList;
    }

    public List<Department> getAllDepartments() {
        return DEPARTMENT_LIST;
    }
}



class Department {
    private int id;
    private String name;

    public Department() {}

    public int getId() { return id; }

    public void setId(int id) { this.id = id; }

    public String getName() { return name; }

    public void setName(String name) { this.name = name; }
}
